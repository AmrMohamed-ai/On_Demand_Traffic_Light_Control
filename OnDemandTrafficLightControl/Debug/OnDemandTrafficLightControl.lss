
OnDemandTrafficLightControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000012a8  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800068  00800068  00001344  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ef  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_1>
       8:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_10>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 09 	call	0x128a	; 0x128a <main>
      8a:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
static volatile void (*g_callBackPtr_CMP)(void) = NULL;



ISR(TIMER0_OVF_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	4f 93       	push	r20
      a2:	5f 93       	push	r21
      a4:	6f 93       	push	r22
      a6:	7f 93       	push	r23
      a8:	8f 93       	push	r24
      aa:	9f 93       	push	r25
      ac:	af 93       	push	r26
      ae:	bf 93       	push	r27
      b0:	ef 93       	push	r30
      b2:	ff 93       	push	r31
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_OVF != NULL)
      bc:	80 91 68 00 	lds	r24, 0x0068
      c0:	90 91 69 00 	lds	r25, 0x0069
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_11+0x40>
	{
		(*g_callBackPtr_OVF)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
      c8:	e0 91 68 00 	lds	r30, 0x0068
      cc:	f0 91 69 00 	lds	r31, 0x0069
      d0:	09 95       	icall
	}
}
      d2:	cf 91       	pop	r28
      d4:	df 91       	pop	r29
      d6:	ff 91       	pop	r31
      d8:	ef 91       	pop	r30
      da:	bf 91       	pop	r27
      dc:	af 91       	pop	r26
      de:	9f 91       	pop	r25
      e0:	8f 91       	pop	r24
      e2:	7f 91       	pop	r23
      e4:	6f 91       	pop	r22
      e6:	5f 91       	pop	r21
      e8:	4f 91       	pop	r20
      ea:	3f 91       	pop	r19
      ec:	2f 91       	pop	r18
      ee:	0f 90       	pop	r0
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	0f 90       	pop	r0
      f4:	1f 90       	pop	r1
      f6:	18 95       	reti

000000f8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
      f8:	1f 92       	push	r1
      fa:	0f 92       	push	r0
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	0f 92       	push	r0
     100:	11 24       	eor	r1, r1
     102:	2f 93       	push	r18
     104:	3f 93       	push	r19
     106:	4f 93       	push	r20
     108:	5f 93       	push	r21
     10a:	6f 93       	push	r22
     10c:	7f 93       	push	r23
     10e:	8f 93       	push	r24
     110:	9f 93       	push	r25
     112:	af 93       	push	r26
     114:	bf 93       	push	r27
     116:	ef 93       	push	r30
     118:	ff 93       	push	r31
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_CMP != NULL)
     122:	80 91 6a 00 	lds	r24, 0x006A
     126:	90 91 6b 00 	lds	r25, 0x006B
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	29 f0       	breq	.+10     	; 0x138 <__vector_10+0x40>
	{
		(*g_callBackPtr_CMP)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
     12e:	e0 91 6a 00 	lds	r30, 0x006A
     132:	f0 91 6b 00 	lds	r31, 0x006B
     136:	09 95       	icall
	}
}
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	0f be       	out	0x3f, r0	; 63
     158:	0f 90       	pop	r0
     15a:	1f 90       	pop	r1
     15c:	18 95       	reti

0000015e <Timer0_init>:



error_state Timer0_init (const Timer0_ConfigType * ConfigPtr)
{
     15e:	df 93       	push	r29
     160:	cf 93       	push	r28
     162:	00 d0       	rcall	.+0      	; 0x164 <Timer0_init+0x6>
     164:	0f 92       	push	r0
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	9a 83       	std	Y+2, r25	; 0x02
     16c:	89 83       	std	Y+1, r24	; 0x01
	if (ConfigPtr->Mode == NORMAL_MODE)
     16e:	e9 81       	ldd	r30, Y+1	; 0x01
     170:	fa 81       	ldd	r31, Y+2	; 0x02
     172:	80 81       	ld	r24, Z
     174:	88 23       	and	r24, r24
     176:	99 f5       	brne	.+102    	; 0x1de <Timer0_init+0x80>
	{
		TCNT0 = ConfigPtr->InitialValue;
     178:	a2 e5       	ldi	r26, 0x52	; 82
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e9 81       	ldd	r30, Y+1	; 0x01
     17e:	fa 81       	ldd	r31, Y+2	; 0x02
     180:	81 81       	ldd	r24, Z+1	; 0x01
     182:	8c 93       	st	X, r24
		if(ConfigPtr -> Op == interrupt)
     184:	e9 81       	ldd	r30, Y+1	; 0x01
     186:	fa 81       	ldd	r31, Y+2	; 0x02
     188:	85 81       	ldd	r24, Z+5	; 0x05
     18a:	88 23       	and	r24, r24
     18c:	41 f4       	brne	.+16     	; 0x19e <Timer0_init+0x40>
		{
			SET_BIT(TIMSK, TOIE0);          // overflow INT Enable
     18e:	a9 e5       	ldi	r26, 0x59	; 89
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	e9 e5       	ldi	r30, 0x59	; 89
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	81 60       	ori	r24, 0x01	; 1
     19a:	8c 93       	st	X, r24
     19c:	0c c0       	rjmp	.+24     	; 0x1b6 <Timer0_init+0x58>
		}
		else if(ConfigPtr->Op == polling)
     19e:	e9 81       	ldd	r30, Y+1	; 0x01
     1a0:	fa 81       	ldd	r31, Y+2	; 0x02
     1a2:	85 81       	ldd	r24, Z+5	; 0x05
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	39 f4       	brne	.+14     	; 0x1b6 <Timer0_init+0x58>
		{
			CLEAR_BIT(TIMSK, TOIE0);
     1a8:	a9 e5       	ldi	r26, 0x59	; 89
     1aa:	b0 e0       	ldi	r27, 0x00	; 0
     1ac:	e9 e5       	ldi	r30, 0x59	; 89
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	8e 7f       	andi	r24, 0xFE	; 254
     1b4:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 */
		SET_BIT (TCCR0,FOC0);
     1b6:	a3 e5       	ldi	r26, 0x53	; 83
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e3 e5       	ldi	r30, 0x53	; 83
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 68       	ori	r24, 0x80	; 128
     1c2:	8c 93       	st	X, r24
		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock);  // clock
     1c4:	a3 e5       	ldi	r26, 0x53	; 83
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	e3 e5       	ldi	r30, 0x53	; 83
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	98 2f       	mov	r25, r24
     1d0:	98 7f       	andi	r25, 0xF8	; 248
     1d2:	e9 81       	ldd	r30, Y+1	; 0x01
     1d4:	fa 81       	ldd	r31, Y+2	; 0x02
     1d6:	82 81       	ldd	r24, Z+2	; 0x02
     1d8:	89 2b       	or	r24, r25
     1da:	8c 93       	st	X, r24
     1dc:	89 c0       	rjmp	.+274    	; 0x2f0 <Timer0_init+0x192>

	}


	else if (ConfigPtr->Mode == CTC_MODE)
     1de:	e9 81       	ldd	r30, Y+1	; 0x01
     1e0:	fa 81       	ldd	r31, Y+2	; 0x02
     1e2:	80 81       	ld	r24, Z
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	09 f0       	breq	.+2      	; 0x1ea <Timer0_init+0x8c>
     1e8:	47 c0       	rjmp	.+142    	; 0x278 <Timer0_init+0x11a>
	{
		TCNT0 = ConfigPtr->InitialValue;
     1ea:	a2 e5       	ldi	r26, 0x52	; 82
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e9 81       	ldd	r30, Y+1	; 0x01
     1f0:	fa 81       	ldd	r31, Y+2	; 0x02
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->CompareValue;
     1f6:	ac e5       	ldi	r26, 0x5C	; 92
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e9 81       	ldd	r30, Y+1	; 0x01
     1fc:	fa 81       	ldd	r31, Y+2	; 0x02
     1fe:	83 81       	ldd	r24, Z+3	; 0x03
     200:	8c 93       	st	X, r24
		SET_BIT (TIMSK,OCIE0);  // Enable Timer0 Compare Interrupt
     202:	a9 e5       	ldi	r26, 0x59	; 89
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	e9 e5       	ldi	r30, 0x59	; 89
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	82 60       	ori	r24, 0x02	; 2
     20e:	8c 93       	st	X, r24
		if(ConfigPtr -> Op == interrupt)
     210:	e9 81       	ldd	r30, Y+1	; 0x01
     212:	fa 81       	ldd	r31, Y+2	; 0x02
     214:	85 81       	ldd	r24, Z+5	; 0x05
     216:	88 23       	and	r24, r24
     218:	41 f4       	brne	.+16     	; 0x22a <Timer0_init+0xcc>
		{
			SET_BIT (TIMSK, OCIE0);
     21a:	a9 e5       	ldi	r26, 0x59	; 89
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e9 e5       	ldi	r30, 0x59	; 89
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	82 60       	ori	r24, 0x02	; 2
     226:	8c 93       	st	X, r24
     228:	0c c0       	rjmp	.+24     	; 0x242 <Timer0_init+0xe4>
		}
		else if(ConfigPtr->Op == polling)
     22a:	e9 81       	ldd	r30, Y+1	; 0x01
     22c:	fa 81       	ldd	r31, Y+2	; 0x02
     22e:	85 81       	ldd	r24, Z+5	; 0x05
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	39 f4       	brne	.+14     	; 0x242 <Timer0_init+0xe4>
		{
			CLEAR_BIT(TIMSK, OCIE0);  // Enable Timer0 Compare Interrupt
     234:	a9 e5       	ldi	r26, 0x59	; 89
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e9 e5       	ldi	r30, 0x59	; 89
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8d 7f       	andi	r24, 0xFD	; 253
     240:	8c 93       	st	X, r24
		/* Configure timer0 control register
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
		 */
		SET_BIT(TCCR0,FOC0);
     242:	a3 e5       	ldi	r26, 0x53	; 83
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e3 e5       	ldi	r30, 0x53	; 83
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 68       	ori	r24, 0x80	; 128
     24e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
     250:	a3 e5       	ldi	r26, 0x53	; 83
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e3 e5       	ldi	r30, 0x53	; 83
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	8c 93       	st	X, r24

		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
     25e:	a3 e5       	ldi	r26, 0x53	; 83
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e3 e5       	ldi	r30, 0x53	; 83
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	98 2f       	mov	r25, r24
     26a:	98 7f       	andi	r25, 0xF8	; 248
     26c:	e9 81       	ldd	r30, Y+1	; 0x01
     26e:	fa 81       	ldd	r31, Y+2	; 0x02
     270:	82 81       	ldd	r24, Z+2	; 0x02
     272:	89 2b       	or	r24, r25
     274:	8c 93       	st	X, r24
     276:	3c c0       	rjmp	.+120    	; 0x2f0 <Timer0_init+0x192>

	}


	else if (ConfigPtr->Mode == PWM_MODE)
     278:	e9 81       	ldd	r30, Y+1	; 0x01
     27a:	fa 81       	ldd	r31, Y+2	; 0x02
     27c:	80 81       	ld	r24, Z
     27e:	82 30       	cpi	r24, 0x02	; 2
     280:	a9 f5       	brne	.+106    	; 0x2ec <Timer0_init+0x18e>
	{
		TCNT0 = ConfigPtr->InitialValue;
     282:	a2 e5       	ldi	r26, 0x52	; 82
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e9 81       	ldd	r30, Y+1	; 0x01
     288:	fa 81       	ldd	r31, Y+2	; 0x02
     28a:	81 81       	ldd	r24, Z+1	; 0x01
     28c:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->DutyCycle;
     28e:	ac e5       	ldi	r26, 0x5C	; 92
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	e9 81       	ldd	r30, Y+1	; 0x01
     294:	fa 81       	ldd	r31, Y+2	; 0x02
     296:	84 81       	ldd	r24, Z+4	; 0x04
     298:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     29a:	a7 e3       	ldi	r26, 0x37	; 55
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e7 e3       	ldi	r30, 0x37	; 55
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	88 60       	ori	r24, 0x08	; 8
     2a6:	8c 93       	st	X, r24
		/* Configure timer control register
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 */
		SET_BIT (TCCR0,WGM00);
     2a8:	a3 e5       	ldi	r26, 0x53	; 83
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e5       	ldi	r30, 0x53	; 83
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 64       	ori	r24, 0x40	; 64
     2b4:	8c 93       	st	X, r24
		SET_BIT (TCCR0,WGM01);
     2b6:	a3 e5       	ldi	r26, 0x53	; 83
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e3 e5       	ldi	r30, 0x53	; 83
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	88 60       	ori	r24, 0x08	; 8
     2c2:	8c 93       	st	X, r24
		SET_BIT (TCCR0,COM01);
     2c4:	a3 e5       	ldi	r26, 0x53	; 83
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	e3 e5       	ldi	r30, 0x53	; 83
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 62       	ori	r24, 0x20	; 32
     2d0:	8c 93       	st	X, r24


		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
     2d2:	a3 e5       	ldi	r26, 0x53	; 83
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	e3 e5       	ldi	r30, 0x53	; 83
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	98 2f       	mov	r25, r24
     2de:	98 7f       	andi	r25, 0xF8	; 248
     2e0:	e9 81       	ldd	r30, Y+1	; 0x01
     2e2:	fa 81       	ldd	r31, Y+2	; 0x02
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	89 2b       	or	r24, r25
     2e8:	8c 93       	st	X, r24
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Timer0_init+0x192>

	}
	else
	{
		return ERROR;
     2ec:	1b 82       	std	Y+3, r1	; 0x03
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Timer0_init+0x196>
	}

	return OK;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	8b 83       	std	Y+3, r24	; 0x03
     2f4:	8b 81       	ldd	r24, Y+3	; 0x03

}
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	cf 91       	pop	r28
     2fe:	df 91       	pop	r29
     300:	08 95       	ret

00000302 <Timer0_OVF_setCallBack>:


void Timer0_OVF_setCallBack(void(*a_ptr)(void))
{
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	00 d0       	rcall	.+0      	; 0x308 <Timer0_OVF_setCallBack+0x6>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr_OVF = a_ptr;
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	90 93 69 00 	sts	0x0069, r25
     318:	80 93 68 00 	sts	0x0068, r24
}
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	cf 91       	pop	r28
     322:	df 91       	pop	r29
     324:	08 95       	ret

00000326 <Timer0_CMP_setCallBack>:



void Timer0_CMP_setCallBack(void(*a_ptr)(void))
{
     326:	df 93       	push	r29
     328:	cf 93       	push	r28
     32a:	00 d0       	rcall	.+0      	; 0x32c <Timer0_CMP_setCallBack+0x6>
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr_CMP = a_ptr;
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	90 93 6b 00 	sts	0x006B, r25
     33c:	80 93 6a 00 	sts	0x006A, r24
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	cf 91       	pop	r28
     346:	df 91       	pop	r29
     348:	08 95       	ret

0000034a <Timer0_DeInit>:


error_state Timer0_DeInit(void)
{
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
     352:	e2 e5       	ldi	r30, 0x52	; 82
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	10 82       	st	Z, r1
	TCCR0=0;
     358:	e3 e5       	ldi	r30, 0x53	; 83
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);    // Disable Overflow INT
     35e:	a9 e5       	ldi	r26, 0x59	; 89
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	e9 e5       	ldi	r30, 0x59	; 89
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 81       	ld	r24, Z
     368:	8e 7f       	andi	r24, 0xFE	; 254
     36a:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE0);   // Disable Timer0 Compare Interrupt
     36c:	a9 e5       	ldi	r26, 0x59	; 89
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e9 e5       	ldi	r30, 0x59	; 89
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	8d 7f       	andi	r24, 0xFD	; 253
     378:	8c 93       	st	X, r24
	return OK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
}
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <Interrupt_GlobalEnable>:


static volatile void (*ISR_Funcptr[MAX_INT])(void) = {NULL};

error_state Interrupt_GlobalEnable (bool enable)
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <Interrupt_GlobalEnable+0x6>
     388:	00 d0       	rcall	.+0      	; 0x38a <Interrupt_GlobalEnable+0x8>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	89 83       	std	Y+1, r24	; 0x01
	switch(enable)
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	3c 83       	std	Y+4, r19	; 0x04
     398:	2b 83       	std	Y+3, r18	; 0x03
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	9c 81       	ldd	r25, Y+4	; 0x04
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	69 f0       	breq	.+26     	; 0x3bc <Interrupt_GlobalEnable+0x3a>
     3a2:	2b 81       	ldd	r18, Y+3	; 0x03
     3a4:	3c 81       	ldd	r19, Y+4	; 0x04
     3a6:	21 30       	cpi	r18, 0x01	; 1
     3a8:	31 05       	cpc	r19, r1
     3aa:	81 f4       	brne	.+32     	; 0x3cc <Interrupt_GlobalEnable+0x4a>
	{
	case ON :

		SET_BIT( SREG , 7 );
     3ac:	af e5       	ldi	r26, 0x5F	; 95
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	ef e5       	ldi	r30, 0x5F	; 95
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	80 68       	ori	r24, 0x80	; 128
     3b8:	8c 93       	st	X, r24
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <Interrupt_GlobalEnable+0x4e>

		/********************************/

	case OFF :

		CLEAR_BIT( SREG , 7 );
     3bc:	af e5       	ldi	r26, 0x5F	; 95
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	ef e5       	ldi	r30, 0x5F	; 95
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 77       	andi	r24, 0x7F	; 127
     3c8:	8c 93       	st	X, r24
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <Interrupt_GlobalEnable+0x4e>

		break;

	default :
		return ERROR;
     3cc:	1a 82       	std	Y+2, r1	; 0x02
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Interrupt_GlobalEnable+0x52>
	}
	return OK;
     3d0:	31 e0       	ldi	r19, 0x01	; 1
     3d2:	3a 83       	std	Y+2, r19	; 0x02
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	cf 91       	pop	r28
     3e0:	df 91       	pop	r29
     3e2:	08 95       	ret

000003e4 <ExInterrupt_init>:


error_state ExInterrupt_init( ExInterrupt_Config* configrations )
{
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	2b 97       	sbiw	r28, 0x0b	; 11
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
	switch( configrations -> Type )
     3fc:	e9 81       	ldd	r30, Y+1	; 0x01
     3fe:	fa 81       	ldd	r31, Y+2	; 0x02
     400:	80 81       	ld	r24, Z
     402:	28 2f       	mov	r18, r24
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	3b 87       	std	Y+11, r19	; 0x0b
     408:	2a 87       	std	Y+10, r18	; 0x0a
     40a:	8a 85       	ldd	r24, Y+10	; 0x0a
     40c:	9b 85       	ldd	r25, Y+11	; 0x0b
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	91 05       	cpc	r25, r1
     412:	09 f4       	brne	.+2      	; 0x416 <ExInterrupt_init+0x32>
     414:	5d c0       	rjmp	.+186    	; 0x4d0 <ExInterrupt_init+0xec>
     416:	2a 85       	ldd	r18, Y+10	; 0x0a
     418:	3b 85       	ldd	r19, Y+11	; 0x0b
     41a:	22 30       	cpi	r18, 0x02	; 2
     41c:	31 05       	cpc	r19, r1
     41e:	09 f4       	brne	.+2      	; 0x422 <ExInterrupt_init+0x3e>
     420:	a9 c0       	rjmp	.+338    	; 0x574 <ExInterrupt_init+0x190>
     422:	8a 85       	ldd	r24, Y+10	; 0x0a
     424:	9b 85       	ldd	r25, Y+11	; 0x0b
     426:	00 97       	sbiw	r24, 0x00	; 0
     428:	09 f0       	breq	.+2      	; 0x42c <ExInterrupt_init+0x48>
     42a:	cf c0       	rjmp	.+414    	; 0x5ca <ExInterrupt_init+0x1e6>

	case External_Interrupt_0_P:

		/* INT0 Enable */

		SET_BIT( GICR , 6);
     42c:	ab e5       	ldi	r26, 0x5B	; 91
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	eb e5       	ldi	r30, 0x5B	; 91
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 64       	ori	r24, 0x40	; 64
     438:	8c 93       	st	X, r24

		switch( configrations -> EdgeType )
     43a:	e9 81       	ldd	r30, Y+1	; 0x01
     43c:	fa 81       	ldd	r31, Y+2	; 0x02
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	39 87       	std	Y+9, r19	; 0x09
     446:	28 87       	std	Y+8, r18	; 0x08
     448:	88 85       	ldd	r24, Y+8	; 0x08
     44a:	99 85       	ldd	r25, Y+9	; 0x09
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	91 05       	cpc	r25, r1
     450:	b1 f0       	breq	.+44     	; 0x47e <ExInterrupt_init+0x9a>
     452:	28 85       	ldd	r18, Y+8	; 0x08
     454:	39 85       	ldd	r19, Y+9	; 0x09
     456:	23 30       	cpi	r18, 0x03	; 3
     458:	31 05       	cpc	r19, r1
     45a:	34 f4       	brge	.+12     	; 0x468 <ExInterrupt_init+0x84>
     45c:	88 85       	ldd	r24, Y+8	; 0x08
     45e:	99 85       	ldd	r25, Y+9	; 0x09
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	91 05       	cpc	r25, r1
     464:	e1 f0       	breq	.+56     	; 0x49e <ExInterrupt_init+0xba>
     466:	32 c0       	rjmp	.+100    	; 0x4cc <ExInterrupt_init+0xe8>
     468:	28 85       	ldd	r18, Y+8	; 0x08
     46a:	39 85       	ldd	r19, Y+9	; 0x09
     46c:	23 30       	cpi	r18, 0x03	; 3
     46e:	31 05       	cpc	r19, r1
     470:	71 f0       	breq	.+28     	; 0x48e <ExInterrupt_init+0xaa>
     472:	88 85       	ldd	r24, Y+8	; 0x08
     474:	99 85       	ldd	r25, Y+9	; 0x09
     476:	84 30       	cpi	r24, 0x04	; 4
     478:	91 05       	cpc	r25, r1
     47a:	01 f1       	breq	.+64     	; 0x4bc <ExInterrupt_init+0xd8>
     47c:	27 c0       	rjmp	.+78     	; 0x4cc <ExInterrupt_init+0xe8>
		{
		/********* CHOOSING THE SENSE TYPE *********/
		case RISING_EDGE:

			MCUCR |= ( 1 << ISC01 ) | ( 1 << ISC00 );
     47e:	a5 e5       	ldi	r26, 0x55	; 85
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	e5 e5       	ldi	r30, 0x55	; 85
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	83 60       	ori	r24, 0x03	; 3
     48a:	8c 93       	st	X, r24
     48c:	a0 c0       	rjmp	.+320    	; 0x5ce <ExInterrupt_init+0x1ea>

			break;

		case FALLING_EDGE:

			MCUCR |= ( 1 << ISC01 );
     48e:	a5 e5       	ldi	r26, 0x55	; 85
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e5 e5       	ldi	r30, 0x55	; 85
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	82 60       	ori	r24, 0x02	; 2
     49a:	8c 93       	st	X, r24
     49c:	98 c0       	rjmp	.+304    	; 0x5ce <ExInterrupt_init+0x1ea>

			break;

		case LOW_LEVEL:

			CLEAR_BIT( MCUCR , ISC01 );
     49e:	a5 e5       	ldi	r26, 0x55	; 85
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e5 e5       	ldi	r30, 0x55	; 85
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8d 7f       	andi	r24, 0xFD	; 253
     4aa:	8c 93       	st	X, r24
			CLEAR_BIT( MCUCR , ISC00 );
     4ac:	a5 e5       	ldi	r26, 0x55	; 85
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	e5 e5       	ldi	r30, 0x55	; 85
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	8c 93       	st	X, r24
     4ba:	89 c0       	rjmp	.+274    	; 0x5ce <ExInterrupt_init+0x1ea>

			break;

		case ANY_LOGIC_CHANGE:

			MCUCR |= ( 1 << ISC00 );
     4bc:	a5 e5       	ldi	r26, 0x55	; 85
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e5 e5       	ldi	r30, 0x55	; 85
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	8c 93       	st	X, r24
     4ca:	81 c0       	rjmp	.+258    	; 0x5ce <ExInterrupt_init+0x1ea>

			break;
		default:
			return ERROR;
     4cc:	1f 82       	std	Y+7, r1	; 0x07
     4ce:	81 c0       	rjmp	.+258    	; 0x5d2 <ExInterrupt_init+0x1ee>
		/********* CHOOSING THE INTERRUPT PERIPHERAL *********/
		case External_Interrupt_1_P:

			/* INT1 Enable */

			SET_BIT( GICR , 7 );
     4d0:	ab e5       	ldi	r26, 0x5B	; 91
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	eb e5       	ldi	r30, 0x5B	; 91
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	80 68       	ori	r24, 0x80	; 128
     4dc:	8c 93       	st	X, r24

			switch( configrations -> EdgeType )
     4de:	e9 81       	ldd	r30, Y+1	; 0x01
     4e0:	fa 81       	ldd	r31, Y+2	; 0x02
     4e2:	81 81       	ldd	r24, Z+1	; 0x01
     4e4:	28 2f       	mov	r18, r24
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	3e 83       	std	Y+6, r19	; 0x06
     4ea:	2d 83       	std	Y+5, r18	; 0x05
     4ec:	8d 81       	ldd	r24, Y+5	; 0x05
     4ee:	9e 81       	ldd	r25, Y+6	; 0x06
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	91 05       	cpc	r25, r1
     4f4:	b1 f0       	breq	.+44     	; 0x522 <ExInterrupt_init+0x13e>
     4f6:	2d 81       	ldd	r18, Y+5	; 0x05
     4f8:	3e 81       	ldd	r19, Y+6	; 0x06
     4fa:	23 30       	cpi	r18, 0x03	; 3
     4fc:	31 05       	cpc	r19, r1
     4fe:	34 f4       	brge	.+12     	; 0x50c <ExInterrupt_init+0x128>
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	91 05       	cpc	r25, r1
     508:	e1 f0       	breq	.+56     	; 0x542 <ExInterrupt_init+0x15e>
     50a:	32 c0       	rjmp	.+100    	; 0x570 <ExInterrupt_init+0x18c>
     50c:	2d 81       	ldd	r18, Y+5	; 0x05
     50e:	3e 81       	ldd	r19, Y+6	; 0x06
     510:	23 30       	cpi	r18, 0x03	; 3
     512:	31 05       	cpc	r19, r1
     514:	71 f0       	breq	.+28     	; 0x532 <ExInterrupt_init+0x14e>
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	9e 81       	ldd	r25, Y+6	; 0x06
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	91 05       	cpc	r25, r1
     51e:	01 f1       	breq	.+64     	; 0x560 <ExInterrupt_init+0x17c>
     520:	27 c0       	rjmp	.+78     	; 0x570 <ExInterrupt_init+0x18c>
			{
			/********* CHOOSING THE SENSE TYPE *********/
			case RISING_EDGE:

				MCUCR |= ( 1 << ISC11 ) | ( 1 << ISC10 );
     522:	a5 e5       	ldi	r26, 0x55	; 85
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	e5 e5       	ldi	r30, 0x55	; 85
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	8c 60       	ori	r24, 0x0C	; 12
     52e:	8c 93       	st	X, r24
     530:	4e c0       	rjmp	.+156    	; 0x5ce <ExInterrupt_init+0x1ea>

				break;

			case FALLING_EDGE:

				MCUCR |= ( 1 << ISC11 );
     532:	a5 e5       	ldi	r26, 0x55	; 85
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e5 e5       	ldi	r30, 0x55	; 85
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	88 60       	ori	r24, 0x08	; 8
     53e:	8c 93       	st	X, r24
     540:	46 c0       	rjmp	.+140    	; 0x5ce <ExInterrupt_init+0x1ea>

				break;

			case LOW_LEVEL:

				CLEAR_BIT( MCUCR , ISC11 );
     542:	a5 e5       	ldi	r26, 0x55	; 85
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e5 e5       	ldi	r30, 0x55	; 85
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	8c 93       	st	X, r24
				CLEAR_BIT( MCUCR , ISC10 );
     550:	a5 e5       	ldi	r26, 0x55	; 85
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	e5 e5       	ldi	r30, 0x55	; 85
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	8b 7f       	andi	r24, 0xFB	; 251
     55c:	8c 93       	st	X, r24
     55e:	37 c0       	rjmp	.+110    	; 0x5ce <ExInterrupt_init+0x1ea>

				break;

			case ANY_LOGIC_CHANGE:

				MCUCR |= ( 1 << ISC10 );
     560:	a5 e5       	ldi	r26, 0x55	; 85
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	e5 e5       	ldi	r30, 0x55	; 85
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	84 60       	ori	r24, 0x04	; 4
     56c:	8c 93       	st	X, r24
     56e:	2f c0       	rjmp	.+94     	; 0x5ce <ExInterrupt_init+0x1ea>

				break;
			default:
				return ERROR;
     570:	1f 82       	std	Y+7, r1	; 0x07
     572:	2f c0       	rjmp	.+94     	; 0x5d2 <ExInterrupt_init+0x1ee>
			/********* CHOOSING THE INTERRUPT PERIPHERAL *********/
			case External_Interrupt_2_P:

				/* INT2 Enable */

				SET_BIT( GICR , 5 );
     574:	ab e5       	ldi	r26, 0x5B	; 91
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	eb e5       	ldi	r30, 0x5B	; 91
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	80 62       	ori	r24, 0x20	; 32
     580:	8c 93       	st	X, r24

				switch( configrations -> EdgeType )
     582:	e9 81       	ldd	r30, Y+1	; 0x01
     584:	fa 81       	ldd	r31, Y+2	; 0x02
     586:	81 81       	ldd	r24, Z+1	; 0x01
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	3c 83       	std	Y+4, r19	; 0x04
     58e:	2b 83       	std	Y+3, r18	; 0x03
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	91 05       	cpc	r25, r1
     598:	31 f0       	breq	.+12     	; 0x5a6 <ExInterrupt_init+0x1c2>
     59a:	2b 81       	ldd	r18, Y+3	; 0x03
     59c:	3c 81       	ldd	r19, Y+4	; 0x04
     59e:	23 30       	cpi	r18, 0x03	; 3
     5a0:	31 05       	cpc	r19, r1
     5a2:	49 f0       	breq	.+18     	; 0x5b6 <ExInterrupt_init+0x1d2>
     5a4:	10 c0       	rjmp	.+32     	; 0x5c6 <ExInterrupt_init+0x1e2>
				{
				/********* CHOOSING THE SENSE TYPE *********/
				case RISING_EDGE:

					MCUCSR |= ( 1 << ISC2 );
     5a6:	a4 e5       	ldi	r26, 0x54	; 84
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e4 e5       	ldi	r30, 0x54	; 84
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	8c 93       	st	X, r24
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <ExInterrupt_init+0x1ea>

					break;

				case FALLING_EDGE:

					MCUCSR &=~ ( 1 << ISC2 );
     5b6:	a4 e5       	ldi	r26, 0x54	; 84
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e4 e5       	ldi	r30, 0x54	; 84
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8f 7b       	andi	r24, 0xBF	; 191
     5c2:	8c 93       	st	X, r24
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ExInterrupt_init+0x1ea>

					break;

				default:
					return ERROR;
     5c6:	1f 82       	std	Y+7, r1	; 0x07
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <ExInterrupt_init+0x1ee>

				}
				break;
				/*====================================================================================*/
				default:
					return ERROR;
     5ca:	1f 82       	std	Y+7, r1	; 0x07
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <ExInterrupt_init+0x1ee>

	}
	return OK;
     5ce:	31 e0       	ldi	r19, 0x01	; 1
     5d0:	3f 83       	std	Y+7, r19	; 0x07
     5d2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     5d4:	2b 96       	adiw	r28, 0x0b	; 11
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <ExInterrupt_CallBack>:

error_state ExInterrupt_CallBack( ExInterrupt_VectorType ISR_ID , void(*function_ptr)(void)  )
{
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <ExInterrupt_CallBack+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <ExInterrupt_CallBack+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	7b 83       	std	Y+3, r23	; 0x03
     5f6:	6a 83       	std	Y+2, r22	; 0x02
	if(ISR_ID < MAX_INT)
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	83 30       	cpi	r24, 0x03	; 3
     5fc:	78 f4       	brcc	.+30     	; 0x61c <ExInterrupt_CallBack+0x36>
	{
		ISR_Funcptr[ISR_ID] = function_ptr;
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	88 2f       	mov	r24, r24
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	2a 81       	ldd	r18, Y+2	; 0x02
     606:	3b 81       	ldd	r19, Y+3	; 0x03
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	fc 01       	movw	r30, r24
     60e:	e4 59       	subi	r30, 0x94	; 148
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	31 83       	std	Z+1, r19	; 0x01
     614:	20 83       	st	Z, r18
		return OK;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8c 83       	std	Y+4, r24	; 0x04
     61a:	01 c0       	rjmp	.+2      	; 0x61e <ExInterrupt_CallBack+0x38>
	}
	else
	{
		return ERROR;
     61c:	1c 82       	std	Y+4, r1	; 0x04
     61e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	cf 91       	pop	r28
     62a:	df 91       	pop	r29
     62c:	08 95       	ret

0000062e <__vector_1>:
 *
 *                                    ISR DEFINITIONS
 *                                                                                             *
 **********************************************************************************************/
ISR(INT0_vect)
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
	if( ISR_Funcptr[ EXT_INT0 ] != NULL )
     658:	80 91 6c 00 	lds	r24, 0x006C
     65c:	90 91 6d 00 	lds	r25, 0x006D
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	29 f0       	breq	.+10     	; 0x66e <__vector_1+0x40>
	{
		(*ISR_Funcptr[ EXT_INT0 ])();
     664:	e0 91 6c 00 	lds	r30, 0x006C
     668:	f0 91 6d 00 	lds	r31, 0x006D
     66c:	09 95       	icall
	}
}
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_2>:


ISR(INT1_vect)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	if( ISR_Funcptr[ EXT_INT1 ] != NULL )
     6be:	80 91 6e 00 	lds	r24, 0x006E
     6c2:	90 91 6f 00 	lds	r25, 0x006F
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <__vector_2+0x40>
	{
		ISR_Funcptr[ EXT_INT1 ]();
     6ca:	e0 91 6e 00 	lds	r30, 0x006E
     6ce:	f0 91 6f 00 	lds	r31, 0x006F
     6d2:	09 95       	icall
	}
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	ff 91       	pop	r31
     6da:	ef 91       	pop	r30
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <__vector_3>:

ISR(INT2_vect)
{
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
	if( ISR_Funcptr[ EXT_INT2 ] != NULL )
     724:	80 91 70 00 	lds	r24, 0x0070
     728:	90 91 71 00 	lds	r25, 0x0071
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	29 f0       	breq	.+10     	; 0x73a <__vector_3+0x40>
	{
		ISR_Funcptr[ EXT_INT2 ]();
     730:	e0 91 70 00 	lds	r30, 0x0070
     734:	f0 91 71 00 	lds	r31, 0x0071
     738:	09 95       	icall
	}
}
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <ExInterrupt_DeInit>:

error_state ExInterrupt_DeInit(ExInterrupt_PeripheralType type)
{
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	00 d0       	rcall	.+0      	; 0x766 <ExInterrupt_DeInit+0x6>
     766:	00 d0       	rcall	.+0      	; 0x768 <ExInterrupt_DeInit+0x8>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	89 83       	std	Y+1, r24	; 0x01
	switch(type)
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	28 2f       	mov	r18, r24
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	3c 83       	std	Y+4, r19	; 0x04
     776:	2b 83       	std	Y+3, r18	; 0x03
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	91 05       	cpc	r25, r1
     780:	89 f0       	breq	.+34     	; 0x7a4 <ExInterrupt_DeInit+0x44>
     782:	2b 81       	ldd	r18, Y+3	; 0x03
     784:	3c 81       	ldd	r19, Y+4	; 0x04
     786:	22 30       	cpi	r18, 0x02	; 2
     788:	31 05       	cpc	r19, r1
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <ExInterrupt_DeInit+0x54>
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	c1 f4       	brne	.+48     	; 0x7c4 <ExInterrupt_DeInit+0x64>
	{
	case External_Interrupt_0_P:
		CLEAR_BIT( GICR , 6);
     794:	ab e5       	ldi	r26, 0x5B	; 91
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	eb e5       	ldi	r30, 0x5B	; 91
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8f 7b       	andi	r24, 0xBF	; 191
     7a0:	8c 93       	st	X, r24
     7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <ExInterrupt_DeInit+0x68>
		break;
	case External_Interrupt_1_P:
		CLEAR_BIT( GICR , 7);
     7a4:	ab e5       	ldi	r26, 0x5B	; 91
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	eb e5       	ldi	r30, 0x5B	; 91
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	8f 77       	andi	r24, 0x7F	; 127
     7b0:	8c 93       	st	X, r24
     7b2:	0a c0       	rjmp	.+20     	; 0x7c8 <ExInterrupt_DeInit+0x68>
		break;
	case External_Interrupt_2_P:
		CLEAR_BIT( GICR , 5);
     7b4:	ab e5       	ldi	r26, 0x5B	; 91
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	eb e5       	ldi	r30, 0x5B	; 91
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8f 7d       	andi	r24, 0xDF	; 223
     7c0:	8c 93       	st	X, r24
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <ExInterrupt_DeInit+0x68>
		break;
	default:
		return ERROR;
     7c4:	1a 82       	std	Y+2, r1	; 0x02
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <ExInterrupt_DeInit+0x6c>
	}
	return OK;
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <DIO_init>:


#include"DIO.h"

error_state DIO_init(uint8 port, uint8 pin , uint8 direction)
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <DIO_init+0x6>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <DIO_init+0x8>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <DIO_init+0xa>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	6a 83       	std	Y+2, r22	; 0x02
     7ee:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	3e 83       	std	Y+6, r19	; 0x06
     7f8:	2d 83       	std	Y+5, r18	; 0x05
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	82 34       	cpi	r24, 0x42	; 66
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <DIO_init+0x2a>
     804:	49 c0       	rjmp	.+146    	; 0x898 <__stack+0x39>
     806:	2d 81       	ldd	r18, Y+5	; 0x05
     808:	3e 81       	ldd	r19, Y+6	; 0x06
     80a:	23 34       	cpi	r18, 0x43	; 67
     80c:	31 05       	cpc	r19, r1
     80e:	34 f4       	brge	.+12     	; 0x81c <DIO_init+0x40>
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	81 34       	cpi	r24, 0x41	; 65
     816:	91 05       	cpc	r25, r1
     818:	71 f0       	breq	.+28     	; 0x836 <DIO_init+0x5a>
     81a:	d1 c0       	rjmp	.+418    	; 0x9be <__stack+0x15f>
     81c:	2d 81       	ldd	r18, Y+5	; 0x05
     81e:	3e 81       	ldd	r19, Y+6	; 0x06
     820:	23 34       	cpi	r18, 0x43	; 67
     822:	31 05       	cpc	r19, r1
     824:	09 f4       	brne	.+2      	; 0x828 <DIO_init+0x4c>
     826:	69 c0       	rjmp	.+210    	; 0x8fa <__stack+0x9b>
     828:	8d 81       	ldd	r24, Y+5	; 0x05
     82a:	9e 81       	ldd	r25, Y+6	; 0x06
     82c:	84 34       	cpi	r24, 0x44	; 68
     82e:	91 05       	cpc	r25, r1
     830:	09 f4       	brne	.+2      	; 0x834 <DIO_init+0x58>
     832:	94 c0       	rjmp	.+296    	; 0x95c <__stack+0xfd>
     834:	c4 c0       	rjmp	.+392    	; 0x9be <__stack+0x15f>
	{
	case PORT_A:
		if(direction == IN)
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	88 23       	and	r24, r24
     83a:	a9 f4       	brne	.+42     	; 0x866 <__stack+0x7>
		{
			CLEAR_BIT(DDRA,pin);
     83c:	aa e3       	ldi	r26, 0x3A	; 58
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	ea e3       	ldi	r30, 0x3A	; 58
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	48 2f       	mov	r20, r24
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	28 2f       	mov	r18, r24
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	02 2e       	mov	r0, r18
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_init+0x7e>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_init+0x7a>
     85e:	80 95       	com	r24
     860:	84 23       	and	r24, r20
     862:	8c 93       	st	X, r24
     864:	ae c0       	rjmp	.+348    	; 0x9c2 <__stack+0x163>
		}
		else if(direction == OUT)
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	a1 f4       	brne	.+40     	; 0x894 <__stack+0x35>
		{
			SET_BIT(DDRA,pin);
     86c:	aa e3       	ldi	r26, 0x3A	; 58
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	ea e3       	ldi	r30, 0x3A	; 58
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	48 2f       	mov	r20, r24
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	28 2f       	mov	r18, r24
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	02 2e       	mov	r0, r18
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	0a 94       	dec	r0
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	84 2b       	or	r24, r20
     890:	8c 93       	st	X, r24
     892:	97 c0       	rjmp	.+302    	; 0x9c2 <__stack+0x163>
		}
		else
		{
			return ERROR;
     894:	1c 82       	std	Y+4, r1	; 0x04
     896:	97 c0       	rjmp	.+302    	; 0x9c6 <__stack+0x167>
		}
		break;
	case PORT_B:
		if(direction == IN)
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	88 23       	and	r24, r24
     89c:	a9 f4       	brne	.+42     	; 0x8c8 <__stack+0x69>
		{
			CLEAR_BIT(DDRB,pin);
     89e:	a7 e3       	ldi	r26, 0x37	; 55
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	e7 e3       	ldi	r30, 0x37	; 55
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	48 2f       	mov	r20, r24
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	02 2e       	mov	r0, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
     8c0:	80 95       	com	r24
     8c2:	84 23       	and	r24, r20
     8c4:	8c 93       	st	X, r24
     8c6:	7d c0       	rjmp	.+250    	; 0x9c2 <__stack+0x163>
		}
		else if(direction == OUT)
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	a1 f4       	brne	.+40     	; 0x8f6 <__stack+0x97>
		{
			SET_BIT(DDRB,pin);
     8ce:	a7 e3       	ldi	r26, 0x37	; 55
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	e7 e3       	ldi	r30, 0x37	; 55
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	48 2f       	mov	r20, r24
     8da:	8a 81       	ldd	r24, Y+2	; 0x02
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	02 2e       	mov	r0, r18
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	84 2b       	or	r24, r20
     8f2:	8c 93       	st	X, r24
     8f4:	66 c0       	rjmp	.+204    	; 0x9c2 <__stack+0x163>
		}
		else
		{
			return ERROR;
     8f6:	1c 82       	std	Y+4, r1	; 0x04
     8f8:	66 c0       	rjmp	.+204    	; 0x9c6 <__stack+0x167>
		}
		break;
	case PORT_C:
		if(direction == IN)
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	88 23       	and	r24, r24
     8fe:	a9 f4       	brne	.+42     	; 0x92a <__stack+0xcb>
		{
			CLEAR_BIT(DDRC,pin);
     900:	a4 e3       	ldi	r26, 0x34	; 52
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e4 e3       	ldi	r30, 0x34	; 52
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	48 2f       	mov	r20, r24
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 2e       	mov	r0, r18
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	0a 94       	dec	r0
     920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
     922:	80 95       	com	r24
     924:	84 23       	and	r24, r20
     926:	8c 93       	st	X, r24
     928:	4c c0       	rjmp	.+152    	; 0x9c2 <__stack+0x163>
		}
		else if(direction == OUT)
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	a1 f4       	brne	.+40     	; 0x958 <__stack+0xf9>
		{
			SET_BIT(DDRC,pin);
     930:	a4 e3       	ldi	r26, 0x34	; 52
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e4 e3       	ldi	r30, 0x34	; 52
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	48 2f       	mov	r20, r24
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	28 2f       	mov	r18, r24
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	02 2e       	mov	r0, r18
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	0a 94       	dec	r0
     950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0xeb>
     952:	84 2b       	or	r24, r20
     954:	8c 93       	st	X, r24
     956:	35 c0       	rjmp	.+106    	; 0x9c2 <__stack+0x163>
		}
		else
		{
			return ERROR;
     958:	1c 82       	std	Y+4, r1	; 0x04
     95a:	35 c0       	rjmp	.+106    	; 0x9c6 <__stack+0x167>
		}
		break;
	case PORT_D:
		if(direction == IN)
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	88 23       	and	r24, r24
     960:	a9 f4       	brne	.+42     	; 0x98c <__stack+0x12d>
		{
			CLEAR_BIT(DDRD,pin);
     962:	a1 e3       	ldi	r26, 0x31	; 49
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e1 e3       	ldi	r30, 0x31	; 49
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	48 2f       	mov	r20, r24
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	28 2f       	mov	r18, r24
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 2e       	mov	r0, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x121>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <__stack+0x11d>
     984:	80 95       	com	r24
     986:	84 23       	and	r24, r20
     988:	8c 93       	st	X, r24
     98a:	1b c0       	rjmp	.+54     	; 0x9c2 <__stack+0x163>
		}
		else if(direction == OUT)
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	a1 f4       	brne	.+40     	; 0x9ba <__stack+0x15b>
		{
			SET_BIT(DDRD,pin);
     992:	a1 e3       	ldi	r26, 0x31	; 49
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e1 e3       	ldi	r30, 0x31	; 49
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	48 2f       	mov	r20, r24
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 2e       	mov	r0, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0x151>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <__stack+0x14d>
     9b4:	84 2b       	or	r24, r20
     9b6:	8c 93       	st	X, r24
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
		}
		else
		{
			return ERROR;
     9ba:	1c 82       	std	Y+4, r1	; 0x04
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__stack+0x167>
		}
		break;
	default:
		return ERROR;
     9be:	1c 82       	std	Y+4, r1	; 0x04
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0x167>
	}
	return OK;
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9c 83       	std	Y+4, r25	; 0x04
     9c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     9c8:	26 96       	adiw	r28, 0x06	; 6
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	08 95       	ret

000009da <DIO_write>:

error_state DIO_write(uint8 port, uint8 pin , uint8 value)
{
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <DIO_write+0x6>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <DIO_write+0x8>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <DIO_write+0xa>
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	6a 83       	std	Y+2, r22	; 0x02
     9ec:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	3e 83       	std	Y+6, r19	; 0x06
     9f6:	2d 83       	std	Y+5, r18	; 0x05
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	9e 81       	ldd	r25, Y+6	; 0x06
     9fc:	82 34       	cpi	r24, 0x42	; 66
     9fe:	91 05       	cpc	r25, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <DIO_write+0x2a>
     a02:	49 c0       	rjmp	.+146    	; 0xa96 <DIO_write+0xbc>
     a04:	2d 81       	ldd	r18, Y+5	; 0x05
     a06:	3e 81       	ldd	r19, Y+6	; 0x06
     a08:	23 34       	cpi	r18, 0x43	; 67
     a0a:	31 05       	cpc	r19, r1
     a0c:	34 f4       	brge	.+12     	; 0xa1a <DIO_write+0x40>
     a0e:	8d 81       	ldd	r24, Y+5	; 0x05
     a10:	9e 81       	ldd	r25, Y+6	; 0x06
     a12:	81 34       	cpi	r24, 0x41	; 65
     a14:	91 05       	cpc	r25, r1
     a16:	71 f0       	breq	.+28     	; 0xa34 <DIO_write+0x5a>
     a18:	d1 c0       	rjmp	.+418    	; 0xbbc <DIO_write+0x1e2>
     a1a:	2d 81       	ldd	r18, Y+5	; 0x05
     a1c:	3e 81       	ldd	r19, Y+6	; 0x06
     a1e:	23 34       	cpi	r18, 0x43	; 67
     a20:	31 05       	cpc	r19, r1
     a22:	09 f4       	brne	.+2      	; 0xa26 <DIO_write+0x4c>
     a24:	69 c0       	rjmp	.+210    	; 0xaf8 <DIO_write+0x11e>
     a26:	8d 81       	ldd	r24, Y+5	; 0x05
     a28:	9e 81       	ldd	r25, Y+6	; 0x06
     a2a:	84 34       	cpi	r24, 0x44	; 68
     a2c:	91 05       	cpc	r25, r1
     a2e:	09 f4       	brne	.+2      	; 0xa32 <DIO_write+0x58>
     a30:	94 c0       	rjmp	.+296    	; 0xb5a <DIO_write+0x180>
     a32:	c4 c0       	rjmp	.+392    	; 0xbbc <DIO_write+0x1e2>
	{
	case PORT_A:
		if(value == HIGH)
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	a1 f4       	brne	.+40     	; 0xa62 <DIO_write+0x88>
		{
			SET_BIT(PORTA, pin);
     a3a:	ab e3       	ldi	r26, 0x3B	; 59
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	eb e3       	ldi	r30, 0x3B	; 59
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	48 2f       	mov	r20, r24
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	02 2e       	mov	r0, r18
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_write+0x7e>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	0a 94       	dec	r0
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <DIO_write+0x7a>
     a5c:	84 2b       	or	r24, r20
     a5e:	8c 93       	st	X, r24
     a60:	af c0       	rjmp	.+350    	; 0xbc0 <DIO_write+0x1e6>
		}
		else if(value == LOW)
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	88 23       	and	r24, r24
     a66:	a9 f4       	brne	.+42     	; 0xa92 <DIO_write+0xb8>
		{
			CLEAR_BIT(PORTA, pin);
     a68:	ab e3       	ldi	r26, 0x3B	; 59
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	eb e3       	ldi	r30, 0x3B	; 59
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	48 2f       	mov	r20, r24
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 2e       	mov	r0, r18
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_write+0xac>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_write+0xa8>
     a8a:	80 95       	com	r24
     a8c:	84 23       	and	r24, r20
     a8e:	8c 93       	st	X, r24
     a90:	97 c0       	rjmp	.+302    	; 0xbc0 <DIO_write+0x1e6>
		}
		else
		{
			return ERROR;
     a92:	1c 82       	std	Y+4, r1	; 0x04
     a94:	97 c0       	rjmp	.+302    	; 0xbc4 <DIO_write+0x1ea>
		}
		break;
	case PORT_B:
		if(value == HIGH)
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	a1 f4       	brne	.+40     	; 0xac4 <DIO_write+0xea>
		{
			SET_BIT(PORTB, pin);
     a9c:	a8 e3       	ldi	r26, 0x38	; 56
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 e3       	ldi	r30, 0x38	; 56
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	48 2f       	mov	r20, r24
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	02 2e       	mov	r0, r18
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <DIO_write+0xe0>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	0a 94       	dec	r0
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <DIO_write+0xdc>
     abe:	84 2b       	or	r24, r20
     ac0:	8c 93       	st	X, r24
     ac2:	7e c0       	rjmp	.+252    	; 0xbc0 <DIO_write+0x1e6>
		}
		else if(value == LOW)
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	88 23       	and	r24, r24
     ac8:	a9 f4       	brne	.+42     	; 0xaf4 <DIO_write+0x11a>
		{
			CLEAR_BIT(PORTB, pin);
     aca:	a8 e3       	ldi	r26, 0x38	; 56
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	e8 e3       	ldi	r30, 0x38	; 56
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	48 2f       	mov	r20, r24
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	02 2e       	mov	r0, r18
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_write+0x10e>
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	0a 94       	dec	r0
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_write+0x10a>
     aec:	80 95       	com	r24
     aee:	84 23       	and	r24, r20
     af0:	8c 93       	st	X, r24
     af2:	66 c0       	rjmp	.+204    	; 0xbc0 <DIO_write+0x1e6>
		}
		else
		{
			return ERROR;
     af4:	1c 82       	std	Y+4, r1	; 0x04
     af6:	66 c0       	rjmp	.+204    	; 0xbc4 <DIO_write+0x1ea>
		}
		break;
	case PORT_C:
		if(value == HIGH)
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	a1 f4       	brne	.+40     	; 0xb26 <DIO_write+0x14c>
		{
			SET_BIT(PORTC, pin);
     afe:	a5 e3       	ldi	r26, 0x35	; 53
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e5 e3       	ldi	r30, 0x35	; 53
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	48 2f       	mov	r20, r24
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	02 2e       	mov	r0, r18
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_write+0x142>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	0a 94       	dec	r0
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_write+0x13e>
     b20:	84 2b       	or	r24, r20
     b22:	8c 93       	st	X, r24
     b24:	4d c0       	rjmp	.+154    	; 0xbc0 <DIO_write+0x1e6>
		}
		else if(value == LOW)
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	88 23       	and	r24, r24
     b2a:	a9 f4       	brne	.+42     	; 0xb56 <DIO_write+0x17c>
		{
			CLEAR_BIT(PORTC, pin);
     b2c:	a5 e3       	ldi	r26, 0x35	; 53
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e5 e3       	ldi	r30, 0x35	; 53
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	48 2f       	mov	r20, r24
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	02 2e       	mov	r0, r18
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_write+0x170>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_write+0x16c>
     b4e:	80 95       	com	r24
     b50:	84 23       	and	r24, r20
     b52:	8c 93       	st	X, r24
     b54:	35 c0       	rjmp	.+106    	; 0xbc0 <DIO_write+0x1e6>
		}
		else
		{
			return ERROR;
     b56:	1c 82       	std	Y+4, r1	; 0x04
     b58:	35 c0       	rjmp	.+106    	; 0xbc4 <DIO_write+0x1ea>
		}
		break;
	case PORT_D:
		if(value == HIGH)
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	a1 f4       	brne	.+40     	; 0xb88 <DIO_write+0x1ae>
		{
			SET_BIT(PORTD, pin);
     b60:	a2 e3       	ldi	r26, 0x32	; 50
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e2 e3       	ldi	r30, 0x32	; 50
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	48 2f       	mov	r20, r24
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 2e       	mov	r0, r18
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <DIO_write+0x1a4>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	0a 94       	dec	r0
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <DIO_write+0x1a0>
     b82:	84 2b       	or	r24, r20
     b84:	8c 93       	st	X, r24
     b86:	1c c0       	rjmp	.+56     	; 0xbc0 <DIO_write+0x1e6>
		}
		else if(value == LOW)
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	88 23       	and	r24, r24
     b8c:	a9 f4       	brne	.+42     	; 0xbb8 <DIO_write+0x1de>
		{
			CLEAR_BIT(PORTD, pin);
     b8e:	a2 e3       	ldi	r26, 0x32	; 50
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e2 e3       	ldi	r30, 0x32	; 50
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	48 2f       	mov	r20, r24
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <DIO_write+0x1d2>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <DIO_write+0x1ce>
     bb0:	80 95       	com	r24
     bb2:	84 23       	and	r24, r20
     bb4:	8c 93       	st	X, r24
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <DIO_write+0x1e6>
		}
		else
		{
			return ERROR;
     bb8:	1c 82       	std	Y+4, r1	; 0x04
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <DIO_write+0x1ea>
		}
		break;
	default:
		return ERROR;
     bbc:	1c 82       	std	Y+4, r1	; 0x04
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_write+0x1ea>
	}
	return OK;
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bc6:	26 96       	adiw	r28, 0x06	; 6
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <DIO_read>:
error_state DIO_read(uint8 port, uint8 pin , uint8 *value)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	27 97       	sbiw	r28, 0x07	; 7
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	6a 83       	std	Y+2, r22	; 0x02
     bf0:	5c 83       	std	Y+4, r21	; 0x04
     bf2:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	3f 83       	std	Y+7, r19	; 0x07
     bfc:	2e 83       	std	Y+6, r18	; 0x06
     bfe:	4e 81       	ldd	r20, Y+6	; 0x06
     c00:	5f 81       	ldd	r21, Y+7	; 0x07
     c02:	42 34       	cpi	r20, 0x42	; 66
     c04:	51 05       	cpc	r21, r1
     c06:	c1 f1       	breq	.+112    	; 0xc78 <DIO_read+0xa0>
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	83 34       	cpi	r24, 0x43	; 67
     c0e:	91 05       	cpc	r25, r1
     c10:	34 f4       	brge	.+12     	; 0xc1e <DIO_read+0x46>
     c12:	2e 81       	ldd	r18, Y+6	; 0x06
     c14:	3f 81       	ldd	r19, Y+7	; 0x07
     c16:	21 34       	cpi	r18, 0x41	; 65
     c18:	31 05       	cpc	r19, r1
     c1a:	71 f0       	breq	.+28     	; 0xc38 <DIO_read+0x60>
     c1c:	8d c0       	rjmp	.+282    	; 0xd38 <DIO_read+0x160>
     c1e:	4e 81       	ldd	r20, Y+6	; 0x06
     c20:	5f 81       	ldd	r21, Y+7	; 0x07
     c22:	43 34       	cpi	r20, 0x43	; 67
     c24:	51 05       	cpc	r21, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <DIO_read+0x52>
     c28:	47 c0       	rjmp	.+142    	; 0xcb8 <DIO_read+0xe0>
     c2a:	8e 81       	ldd	r24, Y+6	; 0x06
     c2c:	9f 81       	ldd	r25, Y+7	; 0x07
     c2e:	84 34       	cpi	r24, 0x44	; 68
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <DIO_read+0x5e>
     c34:	61 c0       	rjmp	.+194    	; 0xcf8 <DIO_read+0x120>
     c36:	80 c0       	rjmp	.+256    	; 0xd38 <DIO_read+0x160>
	{
	case PORT_A:
		*value = GET_BIT(PINA,pin);
     c38:	e9 e3       	ldi	r30, 0x39	; 57
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_read+0x7a>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	2a 95       	dec	r18
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_read+0x76>
     c56:	9a 01       	movw	r18, r20
     c58:	28 23       	and	r18, r24
     c5a:	39 23       	and	r19, r25
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a9 01       	movw	r20, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_read+0x92>
     c66:	55 95       	asr	r21
     c68:	47 95       	ror	r20
     c6a:	8a 95       	dec	r24
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_read+0x8e>
     c6e:	ca 01       	movw	r24, r20
     c70:	eb 81       	ldd	r30, Y+3	; 0x03
     c72:	fc 81       	ldd	r31, Y+4	; 0x04
     c74:	80 83       	st	Z, r24
     c76:	62 c0       	rjmp	.+196    	; 0xd3c <DIO_read+0x164>
		break;
	case PORT_B:
		*value = GET_BIT(PINB,pin);
     c78:	e6 e3       	ldi	r30, 0x36	; 54
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_read+0xba>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	2a 95       	dec	r18
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_read+0xb6>
     c96:	9a 01       	movw	r18, r20
     c98:	28 23       	and	r18, r24
     c9a:	39 23       	and	r19, r25
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a9 01       	movw	r20, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_read+0xd2>
     ca6:	55 95       	asr	r21
     ca8:	47 95       	ror	r20
     caa:	8a 95       	dec	r24
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_read+0xce>
     cae:	ca 01       	movw	r24, r20
     cb0:	eb 81       	ldd	r30, Y+3	; 0x03
     cb2:	fc 81       	ldd	r31, Y+4	; 0x04
     cb4:	80 83       	st	Z, r24
     cb6:	42 c0       	rjmp	.+132    	; 0xd3c <DIO_read+0x164>
		break;
	case PORT_C:
		*value = GET_BIT(PINC,pin);
     cb8:	e3 e3       	ldi	r30, 0x33	; 51
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_read+0xfa>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	2a 95       	dec	r18
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_read+0xf6>
     cd6:	9a 01       	movw	r18, r20
     cd8:	28 23       	and	r18, r24
     cda:	39 23       	and	r19, r25
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a9 01       	movw	r20, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_read+0x112>
     ce6:	55 95       	asr	r21
     ce8:	47 95       	ror	r20
     cea:	8a 95       	dec	r24
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_read+0x10e>
     cee:	ca 01       	movw	r24, r20
     cf0:	eb 81       	ldd	r30, Y+3	; 0x03
     cf2:	fc 81       	ldd	r31, Y+4	; 0x04
     cf4:	80 83       	st	Z, r24
     cf6:	22 c0       	rjmp	.+68     	; 0xd3c <DIO_read+0x164>
		break;
	case PORT_D:
		*value = GET_BIT(PIND,pin);
     cf8:	e0 e3       	ldi	r30, 0x30	; 48
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_read+0x13a>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	2a 95       	dec	r18
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_read+0x136>
     d16:	9a 01       	movw	r18, r20
     d18:	28 23       	and	r18, r24
     d1a:	39 23       	and	r19, r25
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a9 01       	movw	r20, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_read+0x152>
     d26:	55 95       	asr	r21
     d28:	47 95       	ror	r20
     d2a:	8a 95       	dec	r24
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_read+0x14e>
     d2e:	ca 01       	movw	r24, r20
     d30:	eb 81       	ldd	r30, Y+3	; 0x03
     d32:	fc 81       	ldd	r31, Y+4	; 0x04
     d34:	80 83       	st	Z, r24
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_read+0x164>
		break;
	default:
		return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_read+0x168>
	}
	return OK;
     d3c:	51 e0       	ldi	r21, 0x01	; 1
     d3e:	5d 83       	std	Y+5, r21	; 0x05
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d42:	27 96       	adiw	r28, 0x07	; 7
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <DIO_toggle>:


error_state DIO_toggle( uint8 port, uint8 pin )
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <DIO_toggle+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <DIO_toggle+0x8>
     d5c:	0f 92       	push	r0
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3d 83       	std	Y+5, r19	; 0x05
     d6e:	2c 83       	std	Y+4, r18	; 0x04
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	9d 81       	ldd	r25, Y+5	; 0x05
     d74:	82 34       	cpi	r24, 0x42	; 66
     d76:	91 05       	cpc	r25, r1
     d78:	51 f1       	breq	.+84     	; 0xdce <DIO_toggle+0x7a>
     d7a:	2c 81       	ldd	r18, Y+4	; 0x04
     d7c:	3d 81       	ldd	r19, Y+5	; 0x05
     d7e:	23 34       	cpi	r18, 0x43	; 67
     d80:	31 05       	cpc	r19, r1
     d82:	34 f4       	brge	.+12     	; 0xd90 <DIO_toggle+0x3c>
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	81 34       	cpi	r24, 0x41	; 65
     d8a:	91 05       	cpc	r25, r1
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_toggle+0x52>
     d8e:	5b c0       	rjmp	.+182    	; 0xe46 <DIO_toggle+0xf2>
     d90:	2c 81       	ldd	r18, Y+4	; 0x04
     d92:	3d 81       	ldd	r19, Y+5	; 0x05
     d94:	23 34       	cpi	r18, 0x43	; 67
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_toggle+0xa2>
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	84 34       	cpi	r24, 0x44	; 68
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_toggle+0xca>
     da4:	50 c0       	rjmp	.+160    	; 0xe46 <DIO_toggle+0xf2>
		{
		case PORT_A:
			TOGGLE_BIT(PORTA,pin);
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_toggle+0x70>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_toggle+0x6c>
     dc8:	84 27       	eor	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	3e c0       	rjmp	.+124    	; 0xe4a <DIO_toggle+0xf6>
			break;
		case PORT_B:
			TOGGLE_BIT(PORTB,pin);
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_toggle+0x98>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_toggle+0x94>
     df0:	84 27       	eor	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	2a c0       	rjmp	.+84     	; 0xe4a <DIO_toggle+0xf6>
			break;
		case PORT_C:
			TOGGLE_BIT(PORTC,pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_toggle+0xc0>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_toggle+0xbc>
     e18:	84 27       	eor	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <DIO_toggle+0xf6>
			break;
		case PORT_D:
			TOGGLE_BIT(PORTD,pin);
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_toggle+0xe8>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_toggle+0xe4>
     e40:	84 27       	eor	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_toggle+0xf6>
			break;
		default:
			return ERROR;
     e46:	1b 82       	std	Y+3, r1	; 0x03
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_toggle+0xfa>
		}
		return OK;
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	9b 83       	std	Y+3, r25	; 0x03
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <Traffic_init>:
 *
 *                                      FUNCTION DEFINITIONS
 *
 **************************************************************************************************************/
error_state Traffic_init()
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	Interrupt_GlobalEnable(ON);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 c1 01 	call	0x382	; 0x382 <Interrupt_GlobalEnable>
	Timer0_OVF_setCallBack(&TIMER_counter);
     e6e:	88 e9       	ldi	r24, 0x98	; 152
     e70:	98 e0       	ldi	r25, 0x08	; 8
     e72:	0e 94 81 01 	call	0x302	; 0x302 <Timer0_OVF_setCallBack>
	BUTTON_init(BUTTONPORT, 2);
     e76:	84 e4       	ldi	r24, 0x44	; 68
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	0e 94 0c 09 	call	0x1218	; 0x1218 <BUTTON_init>
	ExInterrupt_init(&interrupt_config);
     e7e:	80 e6       	ldi	r24, 0x60	; 96
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <ExInterrupt_init>
	ExInterrupt_CallBack(EXT_INT0, &Traffic_pedestrianMode);
     e86:	25 ec       	ldi	r18, 0xC5	; 197
     e88:	37 e0       	ldi	r19, 0x07	; 7
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	b9 01       	movw	r22, r18
     e8e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ExInterrupt_CallBack>
	LED_init(CARSPORT, CARSREDPIN);
     e92:	81 e4       	ldi	r24, 0x41	; 65
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	LED_init(CARSPORT, CARSYELLOWPIN);
     e9a:	81 e4       	ldi	r24, 0x41	; 65
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	LED_init(CARSPORT, CARSGREENPIN);
     ea2:	81 e4       	ldi	r24, 0x41	; 65
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	LED_init(PEDSPORT, CARSREDPIN);
     eaa:	82 e4       	ldi	r24, 0x42	; 66
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	LED_init(PEDSPORT, CARSYELLOWPIN);
     eb2:	82 e4       	ldi	r24, 0x42	; 66
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	LED_init(PEDSPORT, CARSGREENPIN);
     eba:	82 e4       	ldi	r24, 0x42	; 66
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	0e 94 c9 08 	call	0x1192	; 0x1192 <LED_init>
	return OK;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <Traffic_normalMode>:


error_state Traffic_normalMode()
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <Traffic_normalMode+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	switch(car_state)
     ed4:	80 91 72 00 	lds	r24, 0x0072
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3a 83       	std	Y+2, r19	; 0x02
     ede:	29 83       	std	Y+1, r18	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	21 f1       	breq	.+72     	; 0xf32 <Traffic_normalMode+0x68>
     eea:	29 81       	ldd	r18, Y+1	; 0x01
     eec:	3a 81       	ldd	r19, Y+2	; 0x02
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <Traffic_normalMode+0x34>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <Traffic_normalMode+0x4a>
     efc:	3e c0       	rjmp	.+124    	; 0xf7a <Traffic_normalMode+0xb0>
     efe:	29 81       	ldd	r18, Y+1	; 0x01
     f00:	3a 81       	ldd	r19, Y+2	; 0x02
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	d9 f0       	breq	.+54     	; 0xf3e <Traffic_normalMode+0x74>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	39 f1       	breq	.+78     	; 0xf60 <Traffic_normalMode+0x96>
     f12:	33 c0       	rjmp	.+102    	; 0xf7a <Traffic_normalMode+0xb0>
	{
	/*#####################################################################*/
	case green:
		CARSGREEN_on();
     f14:	0e 94 1d 08 	call	0x103a	; 0x103a <CARSGREEN_on>
		PEDSRED_on();
     f18:	0e 94 29 08 	call	0x1052	; 0x1052 <PEDSRED_on>
		Traffic_timerDelay(SWITCHINGTIME);
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	0e 94 af 08 	call	0x115e	; 0x115e <Traffic_timerDelay>
		CARSGREEN_off();
     f22:	0e 94 74 08 	call	0x10e8	; 0x10e8 <CARSGREEN_off>
		PEDSRED_off();
     f26:	0e 94 80 08 	call	0x1100	; 0x1100 <PEDSRED_off>
		car_state = greentored;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 72 00 	sts	0x0072, r24
     f30:	26 c0       	rjmp	.+76     	; 0xf7e <Traffic_normalMode+0xb4>
		break;
		/*#####################################################################*/
	case greentored:
		YELLOW_blinks();
     f32:	0e 94 35 08 	call	0x106a	; 0x106a <YELLOW_blinks>
		car_state = red;
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	80 93 72 00 	sts	0x0072, r24
     f3c:	20 c0       	rjmp	.+64     	; 0xf7e <Traffic_normalMode+0xb4>
		break;
	case red:
		CARSRED_on();
     f3e:	0e 94 11 08 	call	0x1022	; 0x1022 <CARSRED_on>
		PEDSGREEN_on();
     f42:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <PEDSGREEN_on>
		Traffic_timerDelay(SWITCHINGTIME);
     f46:	85 e0       	ldi	r24, 0x05	; 5
     f48:	0e 94 af 08 	call	0x115e	; 0x115e <Traffic_timerDelay>
		CARSRED_off();
     f4c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CARSRED_off>
		PEDSGREEN_off();
     f50:	0e 94 8c 08 	call	0x1118	; 0x1118 <PEDSGREEN_off>
		car_state = redtogreen;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	80 93 72 00 	sts	0x0072, r24
		g_press = 0;
     f5a:	10 92 76 00 	sts	0x0076, r1
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <Traffic_normalMode+0xb4>
		break;
	case redtogreen:
		YELLOW_blinks();
     f60:	0e 94 35 08 	call	0x106a	; 0x106a <YELLOW_blinks>
		if( car_state == greentored)
     f64:	80 91 72 00 	lds	r24, 0x0072
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	21 f4       	brne	.+8      	; 0xf74 <Traffic_normalMode+0xaa>
		{
			car_state = red;
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	80 93 72 00 	sts	0x0072, r24
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <Traffic_normalMode+0xb4>
		}
		else
		{
			car_state = green;
     f74:	10 92 72 00 	sts	0x0072, r1
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <Traffic_normalMode+0xb4>
		}

		break;
		/*#####################################################################*/
	default:
		YELLOW_blinks();
     f7a:	0e 94 35 08 	call	0x106a	; 0x106a <YELLOW_blinks>
	}
	return OK;
     f7e:	81 e0       	ldi	r24, 0x01	; 1

}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <Traffic_pedestrianMode>:

void Traffic_pedestrianMode()
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Traffic_pedestrianMode+0x6>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	ExInterrupt_DeInit(USEDEXINTERRUPT);
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 b0 03 	call	0x760	; 0x760 <ExInterrupt_DeInit>
	++g_press;
     f9a:	80 91 76 00 	lds	r24, 0x0076
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	80 93 76 00 	sts	0x0076, r24
	if(g_press == 1)
     fa4:	80 91 76 00 	lds	r24, 0x0076
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	b1 f5       	brne	.+108    	; 0x1018 <Traffic_pedestrianMode+0x8e>
	{
		switch(car_state)
     fac:	80 91 72 00 	lds	r24, 0x0072
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3a 83       	std	Y+2, r19	; 0x02
     fb6:	29 83       	std	Y+1, r18	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	e1 f0       	breq	.+56     	; 0xffa <Traffic_pedestrianMode+0x70>
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	3a 81       	ldd	r19, Y+2	; 0x02
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <Traffic_pedestrianMode+0x4c>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	61 f0       	breq	.+24     	; 0xfec <Traffic_pedestrianMode+0x62>
     fd4:	1d c0       	rjmp	.+58     	; 0x1010 <Traffic_pedestrianMode+0x86>
     fd6:	29 81       	ldd	r18, Y+1	; 0x01
     fd8:	3a 81       	ldd	r19, Y+2	; 0x02
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	c1 f0       	breq	.+48     	; 0x1010 <Traffic_pedestrianMode+0x86>
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	71 f0       	breq	.+28     	; 0x1006 <Traffic_pedestrianMode+0x7c>
     fea:	12 c0       	rjmp	.+36     	; 0x1010 <Traffic_pedestrianMode+0x86>
		{
		/*#####################################################################*/
		case green:
			g_timer = SWITCHINGTIME;
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	80 93 73 00 	sts	0x0073, r24
			car_state = greentored;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 72 00 	sts	0x0072, r24
     ff8:	0b c0       	rjmp	.+22     	; 0x1010 <Traffic_pedestrianMode+0x86>
			break;
			/*#####################################################################*/
		case greentored:
			g_yellow = 0;
     ffa:	10 92 75 00 	sts	0x0075, r1
			car_state = greentored;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 72 00 	sts	0x0072, r24
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <Traffic_pedestrianMode+0x86>
			break;
		case red:

			break;
		case redtogreen:
			g_yellow = 0;
    1006:	10 92 75 00 	sts	0x0075, r1
			car_state = greentored;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 72 00 	sts	0x0072, r24
			break;
			/*#####################################################################*/
		}
		ExInterrupt_init(&interrupt_config);
    1010:	80 e6       	ldi	r24, 0x60	; 96
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <ExInterrupt_init>
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <CARSRED_on>:

error_state CARSRED_on()
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	LED_on(CARSPORT, CARSREDPIN);
    102a:	81 e4       	ldi	r24, 0x41	; 65
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <LED_on>

	return OK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <CARSGREEN_on>:


error_state CARSGREEN_on()
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	LED_on(CARSPORT, CARSGREENPIN);
    1042:	81 e4       	ldi	r24, 0x41	; 65
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	0e 94 da 08 	call	0x11b4	; 0x11b4 <LED_on>


	return OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <PEDSRED_on>:

error_state PEDSRED_on()
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	LED_on(PEDSPORT, PEDSREDPIN);
    105a:	82 e4       	ldi	r24, 0x42	; 66
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <LED_on>

	return OK;
    1062:	81 e0       	ldi	r24, 0x01	; 1
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <YELLOW_blinks>:

error_state YELLOW_blinks()
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	10 c0       	rjmp	.+32     	; 0x1094 <YELLOW_blinks+0x2a>
	while(g_yellow < SWITCHINGTIME )
	{
		LED_toggle(PEDSPORT, PEDSYELLOWPIN);
    1074:	82 e4       	ldi	r24, 0x42	; 66
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LED_toggle>
		LED_toggle(CARSPORT, CARSYELLOWPIN);
    107c:	81 e4       	ldi	r24, 0x41	; 65
    107e:	61 e0       	ldi	r22, 0x01	; 1
    1080:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LED_toggle>
		Traffic_timerDelay(1);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 af 08 	call	0x115e	; 0x115e <Traffic_timerDelay>
		++g_yellow;
    108a:	80 91 75 00 	lds	r24, 0x0075
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	80 93 75 00 	sts	0x0075, r24
	return OK;
}

error_state YELLOW_blinks()
{
	while(g_yellow < SWITCHINGTIME )
    1094:	80 91 75 00 	lds	r24, 0x0075
    1098:	85 30       	cpi	r24, 0x05	; 5
    109a:	60 f3       	brcs	.-40     	; 0x1074 <YELLOW_blinks+0xa>
		LED_toggle(PEDSPORT, PEDSYELLOWPIN);
		LED_toggle(CARSPORT, CARSYELLOWPIN);
		Traffic_timerDelay(1);
		++g_yellow;
	}
	LED_off(PEDSPORT, PEDSYELLOWPIN);
    109c:	82 e4       	ldi	r24, 0x42	; 66
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>
	LED_off(CARSPORT, CARSYELLOWPIN);
    10a4:	81 e4       	ldi	r24, 0x41	; 65
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>
	g_yellow = 0;
    10ac:	10 92 75 00 	sts	0x0075, r1
	return OK;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <PEDSGREEN_on>:

error_state PEDSGREEN_on()
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	LED_on(PEDSPORT, PEDSGREENPIN);
    10c0:	82 e4       	ldi	r24, 0x42	; 66
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <LED_on>

	return OK;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
}
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <CARSRED_off>:

error_state CARSRED_off()
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	LED_off(CARSPORT, CARSREDPIN);
    10d8:	81 e4       	ldi	r24, 0x41	; 65
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>

	return OK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <CARSGREEN_off>:

error_state CARSGREEN_off()
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	LED_off(CARSPORT, CARSGREENPIN);
    10f0:	81 e4       	ldi	r24, 0x41	; 65
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>

	return OK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <PEDSRED_off>:

error_state PEDSRED_off()
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	LED_off(PEDSPORT, PEDSREDPIN);
    1108:	82 e4       	ldi	r24, 0x42	; 66
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>

	return OK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <PEDSGREEN_off>:

error_state PEDSGREEN_off()
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	LED_off(PEDSPORT, PEDSGREENPIN);
    1120:	82 e4       	ldi	r24, 0x42	; 66
    1122:	62 e0       	ldi	r22, 0x02	; 2
    1124:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LED_off>

	return OK;
    1128:	81 e0       	ldi	r24, 0x01	; 1
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <TIMER_counter>:



void TIMER_counter(void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	 *                 Through a pointer to function in the function Timer0_OVF_setCallBack.
	 * [Args]        : The function takes no arguments .
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	g_sec++;
    1138:	80 91 74 00 	lds	r24, 0x0074
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	80 93 74 00 	sts	0x0074, r24
	if(g_sec == 4)
    1142:	80 91 74 00 	lds	r24, 0x0074
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	39 f4       	brne	.+14     	; 0x1158 <TIMER_counter+0x28>
	{
		g_timer++;
    114a:	80 91 73 00 	lds	r24, 0x0073
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 73 00 	sts	0x0073, r24
		g_sec = 0;
    1154:	10 92 74 00 	sts	0x0074, r1
	}
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <Traffic_timerDelay>:

error_state Traffic_timerDelay(uint8 a_time)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * [Returns]     : The function returns void.
	 *
	 *
	 *********************************************************************************************************************************/
	Timer0_init(&timer_config);
    116a:	82 e6       	ldi	r24, 0x62	; 98
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 af 00 	call	0x15e	; 0x15e <Timer0_init>
	while(g_timer != a_time){}
    1172:	90 91 73 00 	lds	r25, 0x0073
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	98 17       	cp	r25, r24
    117a:	d9 f7       	brne	.-10     	; 0x1172 <Traffic_timerDelay+0x14>
	Timer0_DeInit();
    117c:	0e 94 a5 01 	call	0x34a	; 0x34a <Timer0_DeInit>
	g_sec = 0;
    1180:	10 92 74 00 	sts	0x0074, r1
	g_timer = 0 ;
    1184:	10 92 73 00 	sts	0x0073, r1
	return OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
}
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <LED_init>:
#include"LED.h"



error_state LED_init( uint8 port, uint8 pin)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <LED_init+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_init(port, pin, OUT);
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	6a 81       	ldd	r22, Y+2	; 0x02
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DIO_init>
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <LED_on>:

error_state LED_on( uint8 port, uint8 pin)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <LED_on+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_write(port, pin, HIGH);
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	6a 81       	ldd	r22, Y+2	; 0x02
    11c6:	41 e0       	ldi	r20, 0x01	; 1
    11c8:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_write>
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <LED_off>:

error_state LED_off( uint8 port, uint8 pin)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <LED_off+0x6>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_write(port, pin, LOW);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	6a 81       	ldd	r22, Y+2	; 0x02
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_write>
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <LED_toggle>:


error_state LED_toggle( uint8 port, uint8 pin)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <LED_toggle+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_toggle(port, pin);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	6a 81       	ldd	r22, Y+2	; 0x02
    120a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_toggle>
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <BUTTON_init>:


#include"BUTTON.h"

error_state BUTTON_init(uint8 port, uint8 pin)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <BUTTON_init+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_init( port, pin, IN );
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	6a 81       	ldd	r22, Y+2	; 0x02
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DIO_init>
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <BUTTON_read>:

error_state BUTTON_read(uint8 port, uint8 pin, uint8* value)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <BUTTON_read+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <BUTTON_read+0x8>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
    124a:	5c 83       	std	Y+4, r21	; 0x04
    124c:	4b 83       	std	Y+3, r20	; 0x03
	return DIO_read(port, pin, value);
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	6a 81       	ldd	r22, Y+2	; 0x02
    1256:	a9 01       	movw	r20, r18
    1258:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_read>
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <app_init>:
 */

#include"../HAL/TrafficControl/traffic_control.h"

void app_init()
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	Traffic_init();
    1272:	0e 94 30 07 	call	0xe60	; 0xe60 <Traffic_init>
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <app_start>:

void app_start()
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	while(1)
		{
			Traffic_normalMode();
    1284:	0e 94 65 07 	call	0xeca	; 0xeca <Traffic_normalMode>
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <app_start+0x8>

0000128a <main>:




int main()
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	//uint8 button;

	app_init();
    1292:	0e 94 35 09 	call	0x126a	; 0x126a <app_init>

	app_start();
    1296:	0e 94 3e 09 	call	0x127c	; 0x127c <app_start>

	return 0;
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <_exit>:
    12a4:	f8 94       	cli

000012a6 <__stop_program>:
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <__stop_program>
